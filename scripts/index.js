// Generated by CoffeeScript 1.10.0
(function() {
  var COLOR_EXPIRED, COLOR_OTHER, COLOR_PAUSED, COLOR_PENDING_DELETE, COLOR_RUNNING, Phaser, SECOND, _rect, abs, drawRect, timerColor;

  Phaser = this.Phaser;

  SECOND = Phaser.Timer.SECOND;

  abs = Math.abs;

  COLOR_RUNNING = '#2cc631';

  COLOR_PAUSED = '#fed609';

  COLOR_EXPIRED = '#fc6f16';

  COLOR_PENDING_DELETE = '#fb2729';

  COLOR_OTHER = '#999999';

  _rect = new Phaser.Rectangle;

  drawRect = function(debug, x, y, width, height, offset, color, filled) {
    _rect.setTo(x, y, width, height).offsetPoint(offset);
    debug.rectangle(_rect, color, filled);
  };

  timerColor = function(timer) {
    switch (false) {
      case !timer.paused:
        return COLOR_PAUSED;
      case !timer.running:
        return COLOR_RUNNING;
      case !timer.expired:
        return COLOR_EXPIRED;
      default:
        return COLOR_OTHER;
    }
  };

  Phaser.Utils.Debug.prototype.timerElapsed = function(timer, x, y, label) {
    var ms, seconds;
    if (timer == null) {
      timer = this.game.time.events;
    }
    if (label == null) {
      label = this.timerName(timer);
    }
    ms = timer.ms, seconds = timer.seconds;
    this.text((label ? label + ": " : "") + (abs(seconds) < 1 ? ms + "ms" : (~~seconds) + "s"), x, y, timerColor(timer), this.font);
  };

  Phaser.Utils.Debug.prototype.timerName = function(timer) {
    if (timer === this.game.time.events) {
      return "game.time.events";
    } else {
      return timer.name;
    }
  };

  Phaser.Utils.Debug.prototype.timerNextEvent = function(timer, x, y, width, height, label) {
    if (timer == null) {
      timer = this.game.time.events;
    }
    if (width == null) {
      width = 100;
    }
    if (height == null) {
      height = 20;
    }
    if (label == null) {
      label = this.timerName(timer);
    }
    if (label) {
      this.text(label + " (" + timer.length + ")", x, y, timerColor(timer), this.font);
      y += height;
    }
    if (timer.length) {
      this.timerEvent(timer.events[0], x, y, width, height);
    } else {
      this.text("No timer events", x, ~~(y + height / 2), this.color, this.font);
    }
  };

  Phaser.Utils.Debug.prototype.timerEvent = function(event, x, y, width, height, label) {
    var color, now, rectColor, textColor;
    if (width == null) {
      width = 100;
    }
    if (height == null) {
      height = 20;
    }
    if (label == null) {
      label = event.name;
    }
    now = event.timer._now;
    color = timerColor(event.timer);
    rectColor = color;
    textColor = this.color;
    if (event.pendingDelete) {
      rectColor = textColor = COLOR_PENDING_DELETE;
    }
    drawRect(this, x, y, ~~((event.tick - now) * width / SECOND), height, this.game.camera, rectColor);
    if (label) {
      this.text(label, x, y + ~~(0.5 * height), textColor, this.font);
    }
  };

  Phaser.Utils.Debug.prototype.timerEvents = function(timer, x, y, width, height, label) {
    var event, i, len, ref;
    if (timer == null) {
      timer = this.game.time.events;
    }
    if (width == null) {
      width = 100;
    }
    if (height == null) {
      height = 20;
    }
    if (label == null) {
      label = this.timerName(timer);
    }
    if (label) {
      this.text(label + " (" + timer.length + ")", x, y, timerColor(timer), this.font);
      y += height;
    }
    ref = timer.events;
    for (i = 0, len = ref.length; i < len; i++) {
      event = ref[i];
      this.timerEvent(event, x, y, width, height);
      y += 1.5 * height;
    }
  };

}).call(this);
